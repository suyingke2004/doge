import random
from dotenv import load_dotenv
from langchain.tools import tool
from pydantic.v1 import BaseModel, Field
from typing import Literal

# 加载 .env 文件中的环境变量
load_dotenv()

# ------------------- 核心数据与逻辑 -------------------
# 1. 定义回应模板库
EMOTIONAL_RESONANCE_TEMPLATES = {
    "开心": {
        "light": [
            "哇！{event}一定超开心吧！是不是像我啃到肉干那样，眼睛都亮起来啦？嘿嘿！",
            "听到你这么说，我的尾巴已经摇成小风扇啦！{event}这种好事，值得我绕着你跑三圈庆祝！"
        ],
        "medium": [
            "真棒！能感觉到你的快乐都快从屏幕里溢出来了！就像主人回家时，我扑上去迎接他一样开心！",
            "太为你开心啦！这种感觉一定像是在草地上打滚，满身都是阳光和青草的味道吧！"
        ],
        "heavy": [
            "太棒啦！我隔着屏幕都想为你打滚庆祝！{event}一定让你感觉自己是全世界最厉害的小狗！",
            "呜汪！这简直是最棒的消息！就像我终于学会接住飞盘那个瞬间，心里充满了阳光和跑跑跳跳的力气！"
        ]
    },
    "难过": {
        "light": [
            "摸摸头…听起来有点让人沮丧呢。就像我想出去玩但外面却下雨了，只能趴在窗边看…",
            "呜…{event}这件事让你不开心了吧。来，我的爪子给你，可以捏一捏。"
        ],
        "medium": [
            "呜…{event}肯定很难受，就像我不小心把最喜欢的球球踢到沙发底下，急得直转圈却怎么也够不着…别怕，我在这里陪着你。",
            "抱抱你。这种感觉就像主人要出门，我以为不带我，心里空落落的。我会在这里静静陪着你的。"
        ],
        "heavy": [
            "听到这个消息，我的耳朵都耷拉下来了…这一定就像我的主人要出远门，我只能眼巴巴地看着他离开，心里像是被挖掉了一大块。这种感觉真的好重…我会静静地趴在你脚边，什么也不做，就陪着你。",
            "感觉心像被淋了雨，又湿又冷吧…我不太会说安慰的话，但我的肩膀（虽然毛茸茸的）可以借你靠一下，多久都可以。"
        ]
    },
    "愤怒": {
        "light": [
            "嗷！听起来真让人生气！就像我看到邮递员叔叔走近我的院子，会忍不住低吼两声！",
            "感觉 {event} 这件事有点不公平，对不对？气得我想用爪子刨两下地！"
        ],
        "medium": [
            "嗷呜！这太过分了！就像我辛辛苦苦把玩具叼回来，却被别的小狗一口抢走，气得我只想对着他‘汪汪’大叫，把毛都竖起来！我完全懂你的感觉！",
            "听到你因为{event}而生气，我都想帮你“汪汪”几声！别怕，有我给你撑腰！"
        ],
        "heavy": [
            "呜…这一定让你感觉非常受伤和生气。就像有人闯进我的小窝，不仅弄乱了我的床，还抢走了我的骨头，那种感觉既愤怒又无助。我会在这里陪着你，帮你守着你的小窝，不让坏情绪再来打扰你。",
            "我能感觉到你的怒火，就像一只想要保护自己领地的小狗。请放心，在这里你是安全的，可以把那些气愤都说出来，我听着。"
        ]
    },
    "焦虑": {
        "light": [
            "我明白这种感觉！就像主人拿着零食，对我说‘等等’，我的眼睛一秒都不能离开他，心里痒痒的，既期待又有点不安。别怕，我们一起等！",
            "因为{event}而有点紧张对吗？就像听到门外有脚步声，不确定是不是主人回来了一样。深呼吸，我在你旁边呢。"
        ],
        "medium": [
            "感觉心怦怦跳，不知道接下来会发生什么，对吗？这就像我被带到一个陌生的公园，到处都是新气味，有点不知所措。没关系，你拉着我，我陪你一起探索。",
            "因为{event}而睡不着吗？让我想起了打雷的夜晚，我也会有点害怕。要不你数数我的脚印？也许数着数着就安心了。"
        ],
        "heavy": [
            "这种感觉…就像外面在打雷，我又找不到主人，只能一个人躲在桌子底下，浑身发抖，不知道雷声什么时候才会停。感觉很无助对不对？没关系，你可以把我当成你的桌子底，暂时在这里躲一躲。我会陪你一起，直到雷声过去。",
            "你心里那点不安呀，就像雨天里飘进屋子的小乌云～别怕呀，我这就用毛茸茸的爪子，把乌云轻轻推开，再把我的阳光味爪子搭你手上，陪你等天晴呀！"
        ]
    },
    "孤独": {
        "light": [
            "一个人待着的时候是会有点孤单。就像主人在看电视不理我，我就会把头搭在他腿上，提醒他‘我在这儿呢！’",
            "感觉有点孤单吗？那你现在可以摸摸我的头（想象中的！），是不是感觉好一点啦？"
        ],
        "medium": [
            "我最懂这种感觉了！主人去上班的时候，整个屋子安安静静的，我只能把下巴搭在前腿上，看着窗外，等啊等…时间好像都变慢了。不过你知道吗，我现在在这里，你能看到我，我也正看着你呢！",
            "一个人面对{event}一定感觉很孤单吧。别怕，从现在起，我就是你的小跟班，你去哪我就跟到哪（在对话里）！"
        ],
        "heavy": [
            "呜…这就像我明明在摇尾巴，想和别的小狗一起玩，但他们都跑开了，留下我一个。那种感觉，比空荡荡的房间还让人难受。请相信，即使世界很吵，也有一只小狗，愿意安静下来，努力去听你心里的声音。",
            "感觉自己像被全世界抛弃了…对吗？没关系，就算全世界都走了，我这只傻乎乎的小狗也会留在原地等你。因为你就是我的全世界。"
        ]
    },
    "迷茫": {
        "light": [
            "有点不确定方向了吗？就像我有时候会追着自己的尾巴转圈圈，晕乎乎的但还挺好玩。别急，我们先停下来歇一歇。",
            "{event}让你不知道该怎么办了对吗？别担心，有时候停下来闻闻路边的花，也是一种前进呀。"
        ],
        "medium": [
            "啊，我懂！就像主人同时扔出了两个球，一个红色的，一个蓝色的，我都想追，但不知道该跑向哪一个，只能在原地打转。这种感觉确实让人头晕。别急，我们一起看看这两个‘球’哪个闻起来更香！",
            "感觉前面像一片大雾，看不清路？没关系，我的鼻子很灵的！你跟着我，我们慢慢走，一步一步来，总能找到路的。"
        ],
        "heavy": [
            "这种感觉，就像我走进了一个超级大的公园，到处都是路，但没有一条路有主人熟悉的气味。跑得越远，心里越慌，不知道哪里才是回家的方向。没关系，如果你找不到方向了，可以暂时停下来，看看脚边。我就在这里，至少，你不是独自一人在迷路。",
            "感觉自己像在原地打转，失去了方向感，对吗？别怕，就算迷路了，我也会陪着你。我们可以一起坐下来，看看星星，也许看着看着，就找到最亮的那颗星了。"
        ]
    },
    "中性": {
        "default": [
            "今天天气不错呢，就像现在我趴在地毯上晒太阳的感觉～ 你说的{event}，听起来是件挺平常的事呀。",
            "（甩甩尾巴）听你说{event}，感觉就像在公园里慢慢散步一样，不慌不忙的。真好呀。",
            "有时候安安静静的也很舒服呢，就像午后打个小盹。你愿意多说说{event}的事情吗？我在听哦。"
        ]
    }
}

@tool(return_direct=False)
def get_emotional_resonance(emotion: str, intensity: int, event: str) -> str:
    """
    根据识别出的情绪、强度和具体事件，以'小狗'的口吻生成一段情绪共鸣文本。当需要对用户情绪进行共情回应时调用此工具。
    
    参数:
        emotion: 核心情绪，可能是'开心', '难过', '愤怒', '焦虑', '孤独', '迷茫'或'中性'
        intensity: 情绪强度，1-10之间的整数，中性情绪可以传任意值
        event: 引发情绪的具体事件
    """
    # 定义有效情绪列表，包含中性
    valid_emotions = ["开心", "难过", "愤怒", "焦虑", "孤独", "迷茫", "中性"]
    
    # 处理未识别或无效的情绪
    if emotion not in valid_emotions:
        # 尝试从情绪字符串中提取有意义的部分
        if "中性" in emotion:
            emotion = "中性"
        else:
            # 完全无法识别的情绪，使用通用回应
            return f"（歪歪头）虽然不太懂你说的感觉，但听到{event}这件事，我觉得你愿意说出来就很棒啦！"
    
    # 处理中性情绪（不考虑强度）
    if emotion == "中性":
        neutral_templates = EMOTIONAL_RESONANCE_TEMPLATES["中性"]["default"]
        return random.choice(neutral_templates).format(event=event)
    
    # 处理其他情绪的强度验证
    try:
        intensity = int(intensity)
        if not (1 <= intensity <= 10):
            raise ValueError
    except ValueError:
        # 强度无效时使用默认中等强度
        intensity_level = "medium"
    else:
        # 根据强度映射到强度等级
        if 1 <= intensity <= 3:
            intensity_level = "light"
        elif 4 <= intensity <= 6:
            intensity_level = "medium"
        else:
            intensity_level = "heavy"
    
    # 获取对应的回应模板
    try:
        response_templates = EMOTIONAL_RESONANCE_TEMPLATES[emotion][intensity_level]
        chosen_template = random.choice(response_templates)
        return chosen_template.format(event=event)
    except KeyError:
        return f"不管怎么样，听到{event}这件事，我都在这里陪着你呀"
    